definitions:
  entity.Category:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  entity.Pet:
    properties:
      category:
        $ref: '#/definitions/entity.Category'
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      name:
        type: string
      photoUrls:
        items:
          type: string
        type: array
      status:
        $ref: '#/definitions/entity.PetStatus'
      tags:
        items:
          $ref: '#/definitions/entity.Tag'
        type: array
      updatedAt:
        type: string
    type: object
  entity.PetStatus:
    enum:
    - available
    - pending
    - sold
    type: string
    x-enum-varnames:
    - AVAILABLE
    - PENDING
    - SOLD
  entity.Tag:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  golithgin.HttpError:
    properties:
      message:
        type: string
      meta: {}
      path:
        type: string
      status:
        type: integer
      timestamp:
        type: string
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
info:
  contact: {}
  description: This is a sample server.
  title: Pet Store Example API
  version: "1.0"
paths:
  /v2/pets:
    post:
      consumes:
      - application/json
      description: Adds a new pet to the store
      parameters:
      - description: Pet object that needs to be added to the store
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/entity.Pet'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Pet'
        "405":
          description: Invalid input
          schema:
            $ref: '#/definitions/golithgin.HttpError'
      summary: Adds a new pet to the store
    put:
      consumes:
      - application/json
      description: Update an existing pet
      parameters:
      - description: Pet object that needs to be added to the store
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/entity.Pet'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Pet'
        "400":
          description: Invalid ID supplied
          schema:
            $ref: '#/definitions/golithgin.HttpError'
        "404":
          description: Pet not found
          schema:
            $ref: '#/definitions/golithgin.HttpError'
        "405":
          description: Validation exception
          schema:
            $ref: '#/definitions/golithgin.HttpError'
      summary: Update an existing pet
  /v2/pets/{petId}:
    delete:
      consumes:
      - application/json
      description: Deletes a pet
      parameters:
      - description: api_key
        in: header
        name: api_key
        type: string
      - description: Pet id to delete
        in: path
        name: petId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "400":
          description: Invalid ID supplied
          schema:
            $ref: '#/definitions/golithgin.HttpError'
        "404":
          description: Pet not found
          schema:
            $ref: '#/definitions/golithgin.HttpError'
      summary: Deletes a pet
    get:
      consumes:
      - application/json
      description: Returns a single pet
      parameters:
      - description: ID of pet to return
        in: path
        name: petId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/entity.Pet'
        "400":
          description: Invalid ID supplied
          schema:
            $ref: '#/definitions/golithgin.HttpError'
        "404":
          description: Pet not found
          schema:
            $ref: '#/definitions/golithgin.HttpError'
      summary: Find pet by ID
  /v2/pets/findByStatus:
    get:
      consumes:
      - application/json
      description: Multiple status values can be provided with comma separated strings
      parameters:
      - description: Status values that need to be considered for filter
        enum:
        - available
        - pending
        - sold
        in: query
        name: status
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: successful operation
          schema:
            items:
              $ref: '#/definitions/entity.Pet'
            type: array
        "400":
          description: Invalid ID supplied
          schema:
            $ref: '#/definitions/golithgin.HttpError'
        "404":
          description: Pet not found
          schema:
            $ref: '#/definitions/golithgin.HttpError'
      summary: Finds Pets by status
swagger: "2.0"
