// Code generated by swaggo/swag. DO NOT EDIT.

package swagger

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/pets": {
            "put": {
                "description": "Update an existing pet",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pet"
                ],
                "summary": "Update an existing pet",
                "parameters": [
                    {
                        "description": "Pet object that needs to be added to the store",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdatePet"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.Pet"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied",
                        "schema": {
                            "$ref": "#/definitions/golithgin.HttpError"
                        }
                    },
                    "404": {
                        "description": "Pet not found",
                        "schema": {
                            "$ref": "#/definitions/golithgin.HttpError"
                        }
                    },
                    "405": {
                        "description": "Validation exception",
                        "schema": {
                            "$ref": "#/definitions/golithgin.HttpError"
                        }
                    }
                }
            },
            "post": {
                "description": "Adds a new pet to the store",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pet"
                ],
                "summary": "Adds a new pet to the store",
                "parameters": [
                    {
                        "description": "Pet object that needs to be added to the store",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreatePet"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/entity.Pet"
                        }
                    },
                    "405": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/golithgin.HttpError"
                        }
                    }
                }
            }
        },
        "/pets/findByStatus": {
            "get": {
                "description": "Multiple status values can be provided with comma separated strings",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pet"
                ],
                "summary": "Finds Pets by status",
                "parameters": [
                    {
                        "enum": [
                            "available",
                            "pending",
                            "sold"
                        ],
                        "type": "string",
                        "description": "Status values that need to be considered for filter",
                        "name": "status",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Pet"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied",
                        "schema": {
                            "$ref": "#/definitions/golithgin.HttpError"
                        }
                    },
                    "404": {
                        "description": "Pet not found",
                        "schema": {
                            "$ref": "#/definitions/golithgin.HttpError"
                        }
                    }
                }
            }
        },
        "/pets/{petId}": {
            "get": {
                "description": "Returns a single pet",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pet"
                ],
                "summary": "Find pet by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of pet to return",
                        "name": "petId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/entity.Pet"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied",
                        "schema": {
                            "$ref": "#/definitions/golithgin.HttpError"
                        }
                    },
                    "404": {
                        "description": "Pet not found",
                        "schema": {
                            "$ref": "#/definitions/golithgin.HttpError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a pet",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pet"
                ],
                "summary": "Deletes a pet",
                "parameters": [
                    {
                        "type": "string",
                        "description": "api_key",
                        "name": "api_key",
                        "in": "header"
                    },
                    {
                        "type": "integer",
                        "description": "Pet id to delete",
                        "name": "petId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied",
                        "schema": {
                            "$ref": "#/definitions/golithgin.HttpError"
                        }
                    },
                    "404": {
                        "description": "Pet not found",
                        "schema": {
                            "$ref": "#/definitions/golithgin.HttpError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.CreatePet": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "integer"
                        },
                        "name": {
                            "type": "string"
                        }
                    }
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "photoUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "status": {
                    "$ref": "#/definitions/entity.PetStatus"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer"
                            },
                            "name": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "dto.UpdatePet": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "integer"
                        },
                        "name": {
                            "type": "string"
                        }
                    }
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "photoUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "status": {
                    "$ref": "#/definitions/entity.PetStatus"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer"
                            },
                            "name": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "entity.Category": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "entity.Pet": {
            "type": "object",
            "properties": {
                "category": {
                    "$ref": "#/definitions/entity.Category"
                },
                "categoryID": {
                    "type": "integer"
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "photoUrls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.PhotoUrl"
                    }
                },
                "status": {
                    "$ref": "#/definitions/entity.PetStatus"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.Tag"
                    }
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "entity.PetStatus": {
            "type": "string",
            "enum": [
                "available",
                "pending",
                "sold"
            ],
            "x-enum-varnames": [
                "AVAILABLE",
                "PENDING",
                "SOLD"
            ]
        },
        "entity.PhotoUrl": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "id": {
                    "type": "integer"
                },
                "pet": {
                    "$ref": "#/definitions/entity.Pet"
                },
                "petID": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "entity.Tag": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "pet": {
                    "$ref": "#/definitions/entity.Pet"
                },
                "petID": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "golithgin.HttpError": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "meta": {},
                "path": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "gorm.DeletedAt": {
            "type": "object",
            "properties": {
                "time": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if Time is not NULL",
                    "type": "boolean"
                }
            }
        }
    },
    "tags": [
        {
            "description": "Everything about your Pets",
            "name": "pet"
        }
    ]
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/v2",
	Schemes:          []string{},
	Title:            "Pet Store Example API",
	Description:      "This is a sample server.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
